memberSearchIndex = [{"p":"io.github.luccaflower.option","c":"Option","l":"and(Option<R>)","url":"and(io.github.luccaflower.option.Option)"},{"p":"io.github.luccaflower.result","c":"Result","l":"and(Result<R, F>)","url":"and(io.github.luccaflower.result.Result)"},{"p":"io.github.luccaflower.option","c":"Option","l":"andCollector()"},{"p":"io.github.luccaflower.result","c":"Result","l":"andCollector()"},{"p":"io.github.luccaflower.option","c":"Option","l":"andThen(Function<? super T, ? extends Option<R>>)","url":"andThen(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Result","l":"andThen(Function<? super T, ? extends R>)","url":"andThen(java.util.function.Function)"},{"p":"io.github.luccaflower.option","c":"Option","l":"contains(T)"},{"p":"io.github.luccaflower.result","c":"Result","l":"contains(T)"},{"p":"io.github.luccaflower.result","c":"Ok","l":"containsErr(E)"},{"p":"io.github.luccaflower.result","c":"Result","l":"containsErr(E)"},{"p":"io.github.luccaflower.option","c":"None","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"io.github.luccaflower.option","c":"Some","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"io.github.luccaflower.option","c":"UnwrappedNone","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"io.github.luccaflower.result","c":"Err","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"io.github.luccaflower.result","c":"Ok","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"io.github.luccaflower.result","c":"Result.ResultException","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"io.github.luccaflower.result","c":"UnwrappedErrorExpectingOk","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"io.github.luccaflower.result","c":"UnwrappedOkExpectingError","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"io.github.luccaflower.result","c":"Result","l":"err()"},{"p":"io.github.luccaflower.result","c":"Result","l":"err(E)"},{"p":"io.github.luccaflower.result","c":"Err","l":"Err(E)","url":"%3Cinit%3E(E)"},{"p":"io.github.luccaflower.result","c":"Result","l":"errToOption()"},{"p":"io.github.luccaflower.option","c":"Option","l":"expect(String)","url":"expect(java.lang.String)"},{"p":"io.github.luccaflower.result","c":"Result","l":"expect(String)","url":"expect(java.lang.String)"},{"p":"io.github.luccaflower.result","c":"Result","l":"expectErr(String)","url":"expectErr(java.lang.String)"},{"p":"io.github.luccaflower.option","c":"Option","l":"filter(Predicate<T>)","url":"filter(java.util.function.Predicate)"},{"p":"io.github.luccaflower.option","c":"ForwardingOption","l":"flatMap(Function<? super T, ? extends Option<R>>)","url":"flatMap(java.util.function.Function)"},{"p":"io.github.luccaflower.option","c":"None","l":"flatMap(Function<? super T, ? extends Option<R>>)","url":"flatMap(java.util.function.Function)"},{"p":"io.github.luccaflower.option","c":"Option","l":"flatMap(Function<? super T, ? extends Option<R>>)","url":"flatMap(java.util.function.Function)"},{"p":"io.github.luccaflower.option","c":"Some","l":"flatMap(Function<? super T, ? extends Option<R>>)","url":"flatMap(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Err","l":"flatMap(Function<? super T, ? extends Result<R, F>>)","url":"flatMap(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"ForwardingResult","l":"flatMap(Function<? super T, ? extends Result<R, F>>)","url":"flatMap(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Ok","l":"flatMap(Function<? super T, ? extends Result<R, F>>)","url":"flatMap(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Result","l":"flatMap(Function<? super T, ? extends Result<R, F>>)","url":"flatMap(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Err","l":"flatMapErr(Function<? super E, ? extends Result<R, F>>)","url":"flatMapErr(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"ForwardingResult","l":"flatMapErr(Function<? super E, ? extends Result<R, F>>)","url":"flatMapErr(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Ok","l":"flatMapErr(Function<? super E, ? extends Result<R, F>>)","url":"flatMapErr(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Result","l":"flatMapErr(Function<? super E, ? extends Result<R, F>>)","url":"flatMapErr(java.util.function.Function)"},{"p":"io.github.luccaflower.option","c":"Option","l":"flatten()"},{"p":"io.github.luccaflower.result","c":"Result","l":"flatten()"},{"p":"io.github.luccaflower.option","c":"Option","l":"from(Optional<T>)","url":"from(java.util.Optional)"},{"p":"io.github.luccaflower.option","c":"None","l":"hashCode()"},{"p":"io.github.luccaflower.option","c":"Some","l":"hashCode()"},{"p":"io.github.luccaflower.option","c":"UnwrappedNone","l":"hashCode()"},{"p":"io.github.luccaflower.result","c":"Err","l":"hashCode()"},{"p":"io.github.luccaflower.result","c":"Ok","l":"hashCode()"},{"p":"io.github.luccaflower.result","c":"Result.ResultException","l":"hashCode()"},{"p":"io.github.luccaflower.result","c":"UnwrappedErrorExpectingOk","l":"hashCode()"},{"p":"io.github.luccaflower.result","c":"UnwrappedOkExpectingError","l":"hashCode()"},{"p":"io.github.luccaflower.result","c":"Result","l":"ifErr(Consumer<? super E>)","url":"ifErr(java.util.function.Consumer)"},{"p":"io.github.luccaflower.option","c":"Option","l":"ifNone(Option.Action)","url":"ifNone(io.github.luccaflower.option.Option.Action)"},{"p":"io.github.luccaflower.result","c":"Result","l":"ifOk(Consumer<? super T>)","url":"ifOk(java.util.function.Consumer)"},{"p":"io.github.luccaflower.option","c":"Option","l":"ifSome(Consumer<? super T>)","url":"ifSome(java.util.function.Consumer)"},{"p":"io.github.luccaflower.option","c":"ForwardingOption","l":"inner()"},{"p":"io.github.luccaflower.result","c":"ForwardingResult","l":"inner()"},{"p":"io.github.luccaflower.result","c":"Result","l":"isErr()"},{"p":"io.github.luccaflower.result","c":"Result","l":"isErrAnd(Predicate<? super E>)","url":"isErrAnd(java.util.function.Predicate)"},{"p":"io.github.luccaflower.option","c":"Option","l":"isNone()"},{"p":"io.github.luccaflower.result","c":"Result","l":"isOk()"},{"p":"io.github.luccaflower.result","c":"Result","l":"isOkAnd(Predicate<? super T>)","url":"isOkAnd(java.util.function.Predicate)"},{"p":"io.github.luccaflower.option","c":"Option","l":"isSome()"},{"p":"io.github.luccaflower.option","c":"Option","l":"isSomeAnd(Predicate<? super T>)","url":"isSomeAnd(java.util.function.Predicate)"},{"p":"io.github.luccaflower.option","c":"Option","l":"map(Function<? super T, ? extends R>)","url":"map(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Result","l":"map(Function<? super T, ? extends R>)","url":"map(java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Result","l":"mapErr(Function<? super E, ? extends F>)","url":"mapErr(java.util.function.Function)"},{"p":"io.github.luccaflower.option","c":"Option","l":"mapOr(R, Function<? super T, ? extends R>)","url":"mapOr(R,java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Result","l":"mapOr(R, Function<? super T, ? extends R>)","url":"mapOr(R,java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Result","l":"mapOrElse(Function<? super E, ? extends R>, Function<? super T, ? extends R>)","url":"mapOrElse(java.util.function.Function,java.util.function.Function)"},{"p":"io.github.luccaflower.option","c":"Option","l":"mapOrElse(Supplier<? extends R>, Function<? super T, ? extends R>)","url":"mapOrElse(java.util.function.Supplier,java.util.function.Function)"},{"p":"io.github.luccaflower.result","c":"Result","l":"matches(Function<? super T, ? extends R>, Function<? super E, ? extends R>)","url":"matches(java.util.function.Function,java.util.function.Function)"},{"p":"io.github.luccaflower.option","c":"Option","l":"matches(Function<? super T, ? extends R>, Supplier<? extends R>)","url":"matches(java.util.function.Function,java.util.function.Supplier)"},{"p":"io.github.luccaflower.option","c":"Option","l":"none()"},{"p":"io.github.luccaflower.option","c":"None","l":"None()","url":"%3Cinit%3E()"},{"p":"io.github.luccaflower.result","c":"Result","l":"ok()"},{"p":"io.github.luccaflower.result","c":"Result","l":"ok(T)"},{"p":"io.github.luccaflower.result","c":"Ok","l":"Ok(T)","url":"%3Cinit%3E(T)"},{"p":"io.github.luccaflower.option","c":"Option","l":"okOr(E)"},{"p":"io.github.luccaflower.option","c":"Option","l":"okOrElse(Supplier<? extends E>)","url":"okOrElse(java.util.function.Supplier)"},{"p":"io.github.luccaflower.result","c":"Result","l":"okToOption()"},{"p":"io.github.luccaflower.option","c":"Option","l":"or(Option<T>)","url":"or(io.github.luccaflower.option.Option)"},{"p":"io.github.luccaflower.result","c":"Result","l":"or(Result<T, F>)","url":"or(io.github.luccaflower.result.Result)"},{"p":"io.github.luccaflower.option","c":"Option","l":"orCollector()"},{"p":"io.github.luccaflower.result","c":"Result","l":"orCollector()"},{"p":"io.github.luccaflower.option","c":"ForwardingOption","l":"orElse(Supplier<? extends Option<T>>)","url":"orElse(java.util.function.Supplier)"},{"p":"io.github.luccaflower.option","c":"None","l":"orElse(Supplier<? extends Option<T>>)","url":"orElse(java.util.function.Supplier)"},{"p":"io.github.luccaflower.option","c":"Option","l":"orElse(Supplier<? extends Option<T>>)","url":"orElse(java.util.function.Supplier)"},{"p":"io.github.luccaflower.option","c":"Some","l":"orElse(Supplier<? extends Option<T>>)","url":"orElse(java.util.function.Supplier)"},{"p":"io.github.luccaflower.result","c":"Result.ResultException","l":"ResultException()","url":"%3Cinit%3E()"},{"p":"io.github.luccaflower.option","c":"Option.Action","l":"run()"},{"p":"io.github.luccaflower.option","c":"Option","l":"some(T)"},{"p":"io.github.luccaflower.option","c":"Some","l":"Some(T)","url":"%3Cinit%3E(T)"},{"p":"io.github.luccaflower.option","c":"Option","l":"stream()"},{"p":"io.github.luccaflower.result","c":"Result","l":"stream()"},{"p":"io.github.luccaflower.result","c":"Unit","l":"unit()"},{"p":"io.github.luccaflower.option","c":"ForwardingOption","l":"unwrap()"},{"p":"io.github.luccaflower.option","c":"None","l":"unwrap()"},{"p":"io.github.luccaflower.option","c":"Option","l":"unwrap()"},{"p":"io.github.luccaflower.option","c":"Some","l":"unwrap()"},{"p":"io.github.luccaflower.result","c":"Err","l":"unwrap()"},{"p":"io.github.luccaflower.result","c":"ForwardingResult","l":"unwrap()"},{"p":"io.github.luccaflower.result","c":"Ok","l":"unwrap()"},{"p":"io.github.luccaflower.result","c":"Result","l":"unwrap()"},{"p":"io.github.luccaflower.result","c":"Err","l":"unwrapErr()"},{"p":"io.github.luccaflower.result","c":"ForwardingResult","l":"unwrapErr()"},{"p":"io.github.luccaflower.result","c":"Ok","l":"unwrapErr()"},{"p":"io.github.luccaflower.result","c":"Result","l":"unwrapErr()"},{"p":"io.github.luccaflower.option","c":"Option","l":"unwrapOr(T)"},{"p":"io.github.luccaflower.result","c":"Result","l":"unwrapOr(T)"},{"p":"io.github.luccaflower.option","c":"Option","l":"unwrapOrElse(Supplier<? extends T>)","url":"unwrapOrElse(java.util.function.Supplier)"},{"p":"io.github.luccaflower.result","c":"Result","l":"unwrapOrElse(Supplier<? extends T>)","url":"unwrapOrElse(java.util.function.Supplier)"},{"p":"io.github.luccaflower.result","c":"UnwrappedErrorExpectingOk","l":"UnwrappedErrorExpectingOk(String, Throwable)","url":"%3Cinit%3E(java.lang.String,java.lang.Throwable)"},{"p":"io.github.luccaflower.result","c":"UnwrappedErrorExpectingOk","l":"UnwrappedErrorExpectingOk(Throwable)","url":"%3Cinit%3E(java.lang.Throwable)"},{"p":"io.github.luccaflower.option","c":"UnwrappedNone","l":"UnwrappedNone()","url":"%3Cinit%3E()"},{"p":"io.github.luccaflower.option","c":"UnwrappedNone","l":"UnwrappedNone(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"io.github.luccaflower.result","c":"UnwrappedOkExpectingError","l":"UnwrappedOkExpectingError()","url":"%3Cinit%3E()"},{"p":"io.github.luccaflower.result","c":"UnwrappedOkExpectingError","l":"UnwrappedOkExpectingError(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"io.github.luccaflower.option","c":"Option","l":"xor(Option<T>)","url":"xor(io.github.luccaflower.option.Option)"}]